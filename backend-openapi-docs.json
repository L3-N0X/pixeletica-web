{
  "openapi": "3.1.0",
  "info": {
    "title": "Pixeletica API",
    "description": "API for converting images to Minecraft block art",
    "version": "0.1.0"
  },
  "paths": {
    "/conversion/preview": {
      "get": {
        "tags": ["conversion", "conversion"],
        "summary": "Generate Quick Preview Image",
        "description": "Creates a preview of an image with the specified dimensions and dithering algorithm. Returns the result directly as a PNG image. Has a built-in timeout mechanism for large images.",
        "operationId": "get_preview_conversion_conversion_preview_get",
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Image width in pixels",
              "title": "Width"
            },
            "description": "Image width in pixels"
          },
          {
            "name": "height",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Image height in pixels (minimum: 1)",
              "title": "Height"
            },
            "description": "Image height in pixels (minimum: 1)"
          },
          {
            "name": "algorithm",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DitherAlgorithm",
              "description": "Dithering algorithm to apply (floyd_steinberg, ordered, or random)",
              "default": "floyd_steinberg"
            },
            "description": "Dithering algorithm to apply (floyd_steinberg, ordered, or random)"
          }
        ],
        "responses": {
          "200": {
            "description": "Converted image with dithering applied",
            "content": { "application/json": { "schema": {} }, "image/png": {} }
          },
          "400": {
            "description": "Bad Request - Invalid dimensions or algorithm",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Image dimensions too large for preview. Please reduce width and/or height."
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout - Processing took too long (large image)",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Preview generation timed out after 3 seconds. Image may be too large for preview."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { "example": { "detail": "Error generating preview" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/start": {
      "post": {
        "tags": ["conversion"],
        "summary": "Start Conversion",
        "description": "Start a new image conversion task using form data mapped to a Pydantic model.\n\nThis endpoint accepts an image and configuration parameters,\ncreates a new task, and returns a task ID for status tracking.",
        "operationId": "start_conversion_conversion_start_post",
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "exclusiveMinimum": 0, "title": "Width" }
          },
          {
            "name": "height",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "exclusiveMinimum": 0, "title": "Height" }
          },
          {
            "name": "dithering_algorithm",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DitherAlgorithm",
              "default": "floyd_steinberg"
            }
          },
          {
            "name": "color_palette",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "minecraft", "title": "Color Palette" }
          },
          {
            "name": "origin_x",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Origin X" }
          },
          {
            "name": "origin_y",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 100, "title": "Origin Y" }
          },
          {
            "name": "origin_z",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Origin Z" }
          },
          {
            "name": "chunk_line_color",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "#FF0000FF", "title": "Chunk Line Color" }
          },
          {
            "name": "block_line_color",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "#000000FF", "title": "Block Line Color" }
          },
          {
            "name": "image_division",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 1,
              "title": "Image Division"
            }
          },
          {
            "name": "generate_schematic",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Generate Schematic" }
          },
          {
            "name": "schematic_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Schematic Name"
            }
          },
          {
            "name": "schematic_author",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": "Pixeletica API", "title": "Schematic Author" }
          },
          {
            "name": "schematic_description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Schematic Description"
            }
          },
          {
            "name": "generate_web_files",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": true, "title": "Generate Web Files" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_start_conversion_conversion_start_post"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" },
                "example": {
                  "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "status": "queued",
                  "progress": 0,
                  "timestamp": "2024-04-13T21:30:00.000Z"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "example": { "detail": "Image size exceeds maximum limit of 10MB" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}": {
      "get": {
        "tags": ["conversion"],
        "summary": "Get Conversion Status",
        "description": "Check the status of a conversion task.\n\nReturns the current status, progress, and any error information.",
        "operationId": "get_conversion_status_conversion__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" },
                "examples": {
                  "processing": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "processing",
                      "progress": 45,
                      "timestamp": "2024-04-13T21:30:00.000Z"
                    }
                  },
                  "completed": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "completed",
                      "progress": 100,
                      "timestamp": "2024-04-13T21:31:00.000Z"
                    }
                  },
                  "failed": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "failed",
                      "timestamp": "2024-04-13T21:30:30.000Z",
                      "error": "Failed to process image: Invalid format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["conversion"],
        "summary": "Delete Task",
        "description": "Delete a conversion task and all associated files.",
        "operationId": "delete_task_conversion__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deletion initiated successfully",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Task d290f1ee-6c54-4b01-90e6-d701748f0851 deletion initiated",
                  "success": true
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/files": {
      "get": {
        "tags": ["conversion"],
        "summary": "List Files",
        "description": "List files generated for a task.\n\nOptionally filter by category (dithered, rendered, schematic, web).",
        "operationId": "list_files_conversion__task_id__files_get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Category" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files for the task",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileListResponse" },
                "example": {
                  "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "files": [
                    {
                      "fileId": "dithered_image",
                      "filename": "dithered.png",
                      "type": "image/png",
                      "size": 1024567,
                      "category": "dithered"
                    },
                    {
                      "fileId": "rendered_image",
                      "filename": "rendered.png",
                      "type": "image/png",
                      "size": 2048123,
                      "category": "rendered"
                    },
                    {
                      "fileId": "schematic",
                      "filename": "build.litematic",
                      "type": "application/octet-stream",
                      "size": 512789,
                      "category": "schematic"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/files/{file_id}": {
      "get": {
        "tags": ["conversion"],
        "summary": "Download File",
        "description": "Download a specific file from a conversion task.\n\nReturns the file for direct download.",
        "operationId": "download_file_conversion__task_id__files__file_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "File Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/download": {
      "get": {
        "tags": ["conversion"],
        "summary": "Download All Files",
        "description": "Download all files from a conversion task as a ZIP archive.",
        "operationId": "download_all_files_conversion__task_id__download_get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["conversion"],
        "summary": "Download Selected Files",
        "description": "Download selected files from a conversion task as a ZIP archive.\n\nSpecify file IDs to include in the download.",
        "operationId": "download_selected_files_conversion__task_id__download_post",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SelectiveDownloadRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/maps.json": {
      "get": {
        "tags": ["maps"],
        "summary": "List Maps",
        "description": "List all available maps (completed conversion tasks).\n\nReturns:\n    List of all maps that have completed processing and have web exports",
        "operationId": "list_maps_api_maps_json_get",
        "responses": {
          "200": {
            "description": "List of available maps",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MapListResponse" },
                "example": {
                  "maps": [
                    {
                      "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "name": "Castle Blueprint",
                      "created": "2024-04-13T21:30:00.000Z",
                      "thumbnail": "/api/map/d290f1ee-6c54-4b01-90e6-d701748f0851/thumbnail.png",
                      "description": "Medieval castle design converted to blocks"
                    },
                    {
                      "id": "7289d334-9a01-45cf-b5cc-8d887c4e9cc2",
                      "name": "Pixel Art Logo",
                      "created": "2024-04-13T20:15:00.000Z",
                      "thumbnail": "/api/map/7289d334-9a01-45cf-b5cc-8d887c4e9cc2/thumbnail.png",
                      "description": "Company logo converted to minecraft blocks"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/metadata.json": {
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Metadata",
        "description": "Get detailed metadata for a specific map.\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    JSON metadata for the map including tile information",
        "operationId": "get_map_metadata_api_map__map_id__metadata_json_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Map metadata",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "name": "Castle Blueprint",
                  "width": 1920,
                  "height": 1080,
                  "origin_x": 0,
                  "origin_z": 0,
                  "created": "2024-04-13T21:30:00.000Z",
                  "tileSize": 256,
                  "maxZoom": 4,
                  "minZoom": 0,
                  "tileFormat": "png",
                  "description": "Medieval castle design converted to blocks"
                }
              }
            }
          },
          "404": {
            "description": "Map not found",
            "content": {
              "application/json": {
                "example": { "detail": "Map not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/full-image.png": {
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Full Image",
        "description": "Get the full image for a map.\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    Full-size PNG image of the map",
        "operationId": "get_map_full_image_api_map__map_id__full_image_png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/thumbnail.png": {
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Thumbnail",
        "description": "Get a thumbnail for a map.\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    Thumbnail PNG image of the map",
        "operationId": "get_map_thumbnail_api_map__map_id__thumbnail_png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail image",
            "content": { "application/json": { "schema": {} }, "image/png": {} }
          },
          "404": {
            "description": "Map not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Image not found for map: d290f1ee-6c54-4b01-90e6-d701748f0851"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/tiles/{zoom}/{x}/{y}.png": {
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Tile",
        "description": "Get a specific tile for a map.\n\nArgs:\n    map_id: Map identifier (task ID)\n    zoom: Zoom level\n    x: X-coordinate of the tile\n    y: Y-coordinate of the tile\n\nReturns:\n    PNG image of the requested tile",
        "operationId": "get_map_tile_api_map__map_id__tiles__zoom___x___y__png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          },
          {
            "name": "zoom",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Zoom" }
          },
          {
            "name": "x",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "X" }
          },
          {
            "name": "y",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Y" }
          }
        ],
        "responses": {
          "200": {
            "description": "Map tile image",
            "content": { "application/json": { "schema": {} }, "image/png": {} }
          },
          "404": {
            "description": "Tile not found",
            "content": {
              "application/json": { "example": { "detail": "Tile not found: zoom=2, x=3, y=4" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["health"],
        "summary": "Root",
        "description": "Root endpoint for health checks.\n\nReturns:\n    Dictionary with API name, version, and status.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Root  Get"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_start_conversion_conversion_start_post": {
        "properties": {
          "image_file": {
            "type": "string",
            "format": "binary",
            "title": "Image File",
            "description": "Image file to convert"
          },
          "line_visibilities": {
            "items": { "$ref": "#/components/schemas/LineVisibilityOption" },
            "type": "array",
            "title": "Line Visibilities",
            "default": ["chunk_lines_only"]
          }
        },
        "type": "object",
        "required": ["image_file"],
        "title": "Body_start_conversion_conversion_start_post"
      },
      "DitherAlgorithm": {
        "type": "string",
        "enum": ["floyd_steinberg", "ordered", "random"],
        "title": "DitherAlgorithm",
        "description": "Supported dithering algorithms."
      },
      "FileInfo": {
        "properties": {
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Unique file identifier"
          },
          "filename": { "type": "string", "title": "Filename", "description": "Original filename" },
          "type": { "type": "string", "title": "Type", "description": "MIME type" },
          "size": { "type": "integer", "title": "Size", "description": "File size in bytes" },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "File category (dithered, rendered, schematic, etc.)"
          }
        },
        "type": "object",
        "required": ["fileId", "filename", "type", "size", "category"],
        "title": "FileInfo",
        "description": "Information about a generated file."
      },
      "FileListResponse": {
        "properties": {
          "taskId": { "type": "string", "title": "Taskid", "description": "Task identifier" },
          "files": {
            "items": { "$ref": "#/components/schemas/FileInfo" },
            "type": "array",
            "title": "Files",
            "description": "Available files"
          }
        },
        "type": "object",
        "required": ["taskId"],
        "title": "FileListResponse",
        "description": "Response model listing available files for a task."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LineVisibilityOption": {
        "type": "string",
        "enum": ["no_lines", "block_grid_only", "chunk_lines_only", "both"],
        "title": "LineVisibilityOption",
        "description": "Available options for line visibility in exported images."
      },
      "MapInfo": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "Map identifier (task ID)" },
          "name": { "type": "string", "title": "Name", "description": "Human-readable map name" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Creation timestamp"
          },
          "thumbnail": {
            "type": "string",
            "title": "Thumbnail",
            "description": "URL to thumbnail image"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Map description"
          }
        },
        "type": "object",
        "required": ["id", "name", "created", "thumbnail"],
        "title": "MapInfo",
        "description": "Information about an available map."
      },
      "MapListResponse": {
        "properties": {
          "maps": {
            "items": { "$ref": "#/components/schemas/MapInfo" },
            "type": "array",
            "title": "Maps",
            "description": "Available maps"
          }
        },
        "type": "object",
        "title": "MapListResponse",
        "description": "Response model for the maps list endpoint."
      },
      "SelectiveDownloadRequest": {
        "properties": {
          "fileIds": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Fileids",
            "description": "IDs of files to include in download"
          }
        },
        "type": "object",
        "required": ["fileIds"],
        "title": "SelectiveDownloadRequest",
        "description": "Request model for downloading selected files."
      },
      "TaskResponse": {
        "properties": {
          "taskId": {
            "type": "string",
            "title": "Taskid",
            "description": "Unique task identifier"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "description": "Current task status"
          },
          "progress": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Progress",
            "description": "Progress percentage (0-100)"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Last status update time"
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error",
            "description": "Error message if task failed"
          }
        },
        "type": "object",
        "required": ["taskId", "status"],
        "title": "TaskResponse",
        "description": "Response model for a task status check."
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["queued", "processing", "completed", "failed"],
        "title": "TaskStatus",
        "description": "Possible states of a conversion task."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
