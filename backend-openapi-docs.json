{
  "openapi": "3.1.0",
  "info": {
    "title": "Pixeletica API",
    "description": "API for converting images to Minecraft block art",
    "version": "0.1.0"
  },
  "paths": {
    "/conversion/preview": {
      "post": {
        "tags": ["conversion", "conversion"],
        "summary": "Generate Quick Preview Image",
        "description": "Creates a preview of an image with the specified dimensions and dithering algorithm. Accepts an image file upload via multipart form. Returns the result directly as a PNG image. Has a built-in timeout mechanism for large images.",
        "operationId": "get_preview_conversion_conversion_preview_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_preview_conversion_conversion_preview_post",
                "properties": {
                  "image_file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to preview (optional - if not provided, a blank image will be used)"
                  },
                  "width": { "type": "integer", "description": "Image width in pixels" },
                  "height": { "type": "integer", "description": "Image height in pixels" },
                  "algorithm": {
                    "type": "string",
                    "enum": ["floyd_steinberg", "ordered", "random"],
                    "description": "Dithering algorithm to apply"
                  },
                  "color_palette": {
                    "type": "string",
                    "enum": ["minecraft", "minecraft-2024"],
                    "description": "Color palette to use for block mapping (minecraft = 2025 palette, minecraft-2024 = 2024 palette)"
                  }
                },
                "type": "object",
                "required": ["width", "height"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Converted image with dithering applied",
            "content": {
              "application/json": { "schema": {} },
              "image/png": { "schema": { "type": "string", "format": "binary" } }
            }
          },
          "400": {
            "description": "Bad Request - Invalid dimensions or algorithm",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Image dimensions too large for preview. Please reduce width and/or height."
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout - Processing took too long (large image)",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Preview generation timed out after 3 seconds. Image may be too large for preview."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": { "example": { "detail": "Error generating preview" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/start": {
      "post": {
        "tags": ["conversion"],
        "summary": "Start Conversion",
        "description": "Start a new image conversion task using REST-standard multipart form data.\n\nThis endpoint accepts:\n- An image file in the 'image_file' field\n- A JSON string in the 'metadata' field containing all configuration parameters\n\nThe metadata JSON should follow the schema of the ConversionJSONMetadata model.\n\nExample metadata JSON:\n```json\n{\n  \"width\": 128,\n  \"height\": 128,\n  \"dithering_algorithm\": \"floyd_steinberg\",\n  \"color_palette\": \"minecraft\",\n  \"origin_x\": 0,\n  \"origin_y\": 100,\n  \"origin_z\": 0,\n  \"chunk_line_color\": \"#FF0000FF\",\n  \"block_line_color\": \"#000000FF\",\n  \"line_visibilities\": [\"chunk_lines_only\"],\n  \"image_division\": 2,\n  \"generate_schematic\": true,\n  \"schematic_name\": \"my_schematic\",\n  \"schematic_author\": \"Pixeletica API\",\n  \"schematic_description\": \"An awesome schematic\",\n  \"generate_web_files\": true\n}\n```\n\nReturns a task ID for status tracking.",
        "operationId": "start_conversion_conversion_start_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_start_conversion_conversion_start_post",
                "properties": {
                  "image_file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to convert"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "JSON string containing all metadata for the conversion task",
                    "example": "{\n  \"width\": 128,\n  \"height\": 128,\n  \"dithering_algorithm\": \"floyd_steinberg\",\n  \"color_palette\": \"minecraft\",\n  \"origin_x\": 0,\n  \"origin_y\": 100,\n  \"origin_z\": 0,\n  \"chunk_line_color\": \"#FF0000FF\",\n  \"block_line_color\": \"#000000FF\",\n  \"line_visibilities\": [\n    \"chunk_lines_only\"\n  ],\n  \"image_division\": 2,\n  \"generate_schematic\": true,\n  \"schematic_name\": \"my_schematic\",\n  \"schematic_author\": \"Pixeletica API\",\n  \"schematic_description\": \"An awesome schematic\",\n  \"generate_web_files\": true\n}"
                  }
                },
                "type": "object",
                "required": ["image_file", "metadata"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" },
                "example": {
                  "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "status": "queued",
                  "progress": 0,
                  "timestamp": "2024-04-13T21:30:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid JSON metadata",
            "content": {
              "application/json": { "example": { "detail": "Invalid JSON metadata format" } }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "example": { "detail": "Image size exceeds maximum limit of 10MB" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/files": {
      "options": {
        "tags": ["conversion"],
        "summary": "Options List Files",
        "description": "Handle OPTIONS requests for the files listing endpoint to support CORS preflight requests.",
        "operationId": "options_list_files_conversion__task_id__files_options",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["conversion"],
        "summary": "List Files",
        "description": "List files generated for a task, grouped by category.\n\nFiles are automatically organized by their categories in the response with a structure that\nseparates single-instance categories (input, dithered, schematic, task_zip) and categorizes\nrendered images by line type (block_lines, chunk_lines, both_lines, no_lines).\n\nArgs:\n    task_id: The unique task identifier\n    include_web: Whether to include web files in the response (default: False)\n    category: Optionally filter to only include files from a specific category",
        "operationId": "list_files_conversion__task_id__files_get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          },
          {
            "name": "include_web",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Include Web" }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }], "title": "Category" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files for the task, grouped by category",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileListResponse" },
                "example": {
                  "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "categories": {
                    "input": {
                      "fileId": "input_original.png",
                      "filename": "original.png",
                      "type": "image/png",
                      "size": 1574956
                    },
                    "dithered": {
                      "fileId": "dithered_image",
                      "filename": "dithered.png",
                      "type": "image/png",
                      "size": 38317
                    },
                    "rendered": {
                      "block_lines": [
                        {
                          "fileId": "rendered_filename_block_lines.png",
                          "filename": "filename_block_lines.png",
                          "type": "image/png",
                          "size": 118231
                        },
                        {
                          "fileId": "rendered_filename_block_lines_split1.png",
                          "filename": "filename_block_lines_split1.png",
                          "type": "image/png",
                          "size": 118231
                        }
                      ],
                      "chunk_lines": [
                        {
                          "fileId": "rendered_filename_chunk_lines.png",
                          "filename": "filename_chunk_lines.png",
                          "type": "image/png",
                          "size": 63059
                        }
                      ]
                    },
                    "schematic": {
                      "fileId": "filename_Floyd_Steinberg_20250417_194844.litematic",
                      "filename": "filename_Floyd_Steinberg_20250417_194844.litematic",
                      "type": "application/octet-stream",
                      "size": 18041
                    },
                    "task_zip": {
                      "fileId": "filename_task.zip",
                      "filename": "filename_task.zip",
                      "type": "application/zip",
                      "size": 12345678
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}": {
      "get": {
        "tags": ["conversion"],
        "summary": "Get Conversion Status",
        "description": "Check the status of a conversion task.\n\nReturns the current status, progress, and any error information.",
        "operationId": "get_conversion_status_conversion__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskResponse" },
                "examples": {
                  "processing": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "processing",
                      "progress": 45,
                      "timestamp": "2024-04-13T21:30:00.000Z"
                    }
                  },
                  "completed": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "completed",
                      "progress": 100,
                      "timestamp": "2024-04-13T21:31:00.000Z"
                    }
                  },
                  "failed": {
                    "value": {
                      "taskId": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "status": "failed",
                      "timestamp": "2024-04-13T21:30:30.000Z",
                      "error": "Failed to process image: Invalid format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["conversion"],
        "summary": "Delete Task",
        "description": "Delete a conversion task and all associated files.",
        "operationId": "delete_task_conversion__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deletion initiated successfully",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "message": "Task d290f1ee-6c54-4b01-90e6-d701748f0851 deletion initiated",
                  "success": true
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/files/{file_id}": {
      "options": {
        "tags": ["conversion"],
        "summary": "Options Download File",
        "description": "Handle OPTIONS requests for the file download endpoint to support CORS preflight requests.",
        "operationId": "options_download_file_conversion__task_id__files__file_id__options",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "File Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["conversion"],
        "summary": "Download a specific file",
        "description": "Download a specific file from a conversion task.\n\nReturns the file for direct download.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "File Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully",
            "content": {
              "application/json": { "schema": {} },
              "application/octet-stream": { "schema": { "type": "string", "format": "binary" } },
              "image/png": { "schema": { "type": "string", "format": "binary" } },
              "image/jpeg": { "schema": { "type": "string", "format": "binary" } },
              "application/zip": { "schema": { "type": "string", "format": "binary" } }
            }
          },
          "404": {
            "description": "Task or file not found",
            "content": {
              "application/json": { "example": { "detail": "File not found: example_file_id" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/conversion/{task_id}/download": {
      "options": {
        "tags": ["conversion"],
        "summary": "Options Download All Files",
        "description": "Handle OPTIONS requests for the bulk download endpoint to support CORS preflight requests.",
        "operationId": "options_download_all_files_conversion__task_id__download_options",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["conversion"],
        "summary": "Download all task files",
        "description": "Download all files from a conversion task as a ZIP archive.",
        "operationId": "downloadAllFiles",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "ZIP file with all task files",
            "content": {
              "application/json": { "schema": {} },
              "application/zip": { "schema": { "type": "string", "format": "binary" } }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "500": {
            "description": "Failed to create ZIP archive",
            "content": {
              "application/json": { "example": { "detail": "Failed to create ZIP archive" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["conversion"],
        "summary": "Download selected task files",
        "description": "Download selected files from a conversion task as a ZIP archive.\n\nSpecify file IDs to include in the download.",
        "operationId": "downloadSelectedFiles",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Task Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SelectiveDownloadRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ZIP file with selected task files",
            "content": {
              "application/json": { "schema": {} },
              "application/zip": { "schema": { "type": "string", "format": "binary" } }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "example": { "detail": "Task not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "500": {
            "description": "Failed to create ZIP archive",
            "content": {
              "application/json": { "example": { "detail": "Failed to create ZIP archive" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/maps.json": {
      "get": {
        "tags": ["maps"],
        "summary": "List Maps",
        "description": "List all available maps (completed conversion tasks).\n\nReturns:\n    List of all maps that have completed processing and have web exports",
        "operationId": "list_maps_api_maps_json_get",
        "responses": {
          "200": {
            "description": "List of available maps",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MapListResponse" },
                "example": {
                  "maps": [
                    {
                      "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                      "name": "Castle Blueprint",
                      "created": "2024-04-13T21:30:00.000Z",
                      "thumbnail": "/api/map/d290f1ee-6c54-4b01-90e6-d701748f0851/thumbnail.png",
                      "description": "Medieval castle design converted to blocks"
                    },
                    {
                      "id": "7289d334-9a01-45cf-b5cc-8d887c4e9cc2",
                      "name": "Pixel Art Logo",
                      "created": "2024-04-13T20:15:00.000Z",
                      "thumbnail": "/api/map/7289d334-9a01-45cf-b5cc-8d887c4e9cc2/thumbnail.png",
                      "description": "Company logo converted to minecraft blocks"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/metadata.json": {
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Metadata",
        "description": "Get detailed metadata for a specific map.\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    JSON metadata for the map including tile information",
        "operationId": "get_map_metadata_api_map__map_id__metadata_json_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Map metadata",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "name": "Castle Blueprint",
                  "width": 1920,
                  "height": 1080,
                  "origin_x": 0,
                  "origin_z": 0,
                  "created": "2024-04-13T21:30:00.000Z",
                  "tileSize": 256,
                  "maxZoom": 4,
                  "minZoom": 0,
                  "tileFormat": "png",
                  "description": "Medieval castle design converted to blocks"
                }
              }
            }
          },
          "404": {
            "description": "Map not found",
            "content": {
              "application/json": {
                "example": { "detail": "Map not found: d290f1ee-6c54-4b01-90e6-d701748f0851" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "options": {
        "tags": ["maps"],
        "summary": "Options Map Endpoints",
        "description": "Handle OPTIONS requests for map endpoints to support CORS preflight requests.",
        "operationId": "options_map_endpoints_api_map__map_id__metadata_json_options",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/map/{map_id}/tiles/{zoom}/{x}/{y}.png": {
      "options": {
        "tags": ["maps"],
        "summary": "Options Map Endpoints",
        "description": "Handle OPTIONS requests for map endpoints to support CORS preflight requests.",
        "operationId": "options_map_endpoints_api_map__map_id__tiles__zoom___x___y__png_options",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      },
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Tile",
        "description": "Get a specific tile for a map.\n\nArgs:\n    map_id: Map identifier (task ID)\n    zoom: Zoom level\n    x: X-coordinate of the tile\n    y: Y-coordinate of the tile\n\nReturns:\n    PNG image of the requested tile",
        "operationId": "get_map_tile_api_map__map_id__tiles__zoom___x___y__png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          },
          {
            "name": "zoom",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Zoom" }
          },
          {
            "name": "x",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "X" }
          },
          {
            "name": "y",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Y" }
          }
        ],
        "responses": {
          "200": {
            "description": "Map tile image",
            "content": { "application/json": { "schema": {} }, "image/png": {} }
          },
          "404": {
            "description": "Tile not found",
            "content": {
              "application/json": { "example": { "detail": "Tile not found: zoom=2, x=3, y=4" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/thumbnail.png": {
      "options": {
        "tags": ["maps"],
        "summary": "Options Map Endpoints",
        "description": "Handle OPTIONS requests for map endpoints to support CORS preflight requests.",
        "operationId": "options_map_endpoints_api_map__map_id__thumbnail_png_options",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      },
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Thumbnail",
        "description": "Get a thumbnail for a map (returns the first dithered image).\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    Thumbnail PNG image of the map (actually the dithered image)",
        "operationId": "get_map_thumbnail_api_map__map_id__thumbnail_png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail image",
            "content": { "application/json": { "schema": {} }, "image/png": {} }
          },
          "404": {
            "description": "Map not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Image not found for map: d290f1ee-6c54-4b01-90e6-d701748f0851"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/map/{map_id}/full-image.png": {
      "options": {
        "tags": ["maps"],
        "summary": "Options Map Endpoints",
        "description": "Handle OPTIONS requests for map endpoints to support CORS preflight requests.",
        "operationId": "options_map_endpoints_api_map__map_id__full_image_png_options",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      },
      "get": {
        "tags": ["maps"],
        "summary": "Get Map Full Image",
        "description": "Get the full image for a map.\n\nArgs:\n    map_id: Map identifier (task ID)\n\nReturns:\n    Full-size PNG image of the map",
        "operationId": "get_map_full_image_api_map__map_id__full_image_png_get",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Map Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["Health"],
        "summary": "Root",
        "description": "Root endpoint for health checking the API.\n\nReturns:\n    Dictionary with API name, version, status.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Root  Get"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_get_preview_conversion_conversion_preview_post": {
        "properties": {
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "description": "Image width in pixels"
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "description": "Image height in pixels (minimum: 1)"
          },
          "algorithm": {
            "$ref": "#/components/schemas/DitherAlgorithm",
            "description": "Dithering algorithm to apply (floyd_steinberg, ordered, or random)",
            "default": "floyd_steinberg"
          },
          "color_palette": {
            "type": "string",
            "title": "Color Palette",
            "description": "Color palette to use for block mapping (default: minecraft - uses 2025 palette)",
            "default": "minecraft"
          },
          "image_file": {
            "anyOf": [{ "type": "string", "format": "binary" }, { "type": "null" }],
            "title": "Image File",
            "description": "Image file to preview (optional)"
          }
        },
        "type": "object",
        "required": ["width", "height"],
        "title": "Body_get_preview_conversion_conversion_preview_post"
      },
      "Body_start_conversion_conversion_start_post": {
        "properties": {
          "image_file": {
            "type": "string",
            "format": "binary",
            "title": "Image File",
            "description": "Image file to convert"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "JSON string containing all metadata for the conversion task"
          }
        },
        "type": "object",
        "required": ["image_file", "metadata"],
        "title": "Body_start_conversion_conversion_start_post"
      },
      "DitherAlgorithm": {
        "type": "string",
        "enum": ["floyd_steinberg", "ordered", "random"],
        "title": "DitherAlgorithm",
        "description": "Supported dithering algorithms."
      },
      "FileInfo": {
        "properties": {
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Unique file identifier"
          },
          "filename": { "type": "string", "title": "Filename", "description": "Original filename" },
          "type": { "type": "string", "title": "Type", "description": "MIME type" },
          "size": { "type": "integer", "title": "Size", "description": "File size in bytes" }
        },
        "type": "object",
        "required": ["fileId", "filename", "type", "size"],
        "title": "FileInfo",
        "description": "Information about a generated file."
      },
      "FileListCategories": {
        "properties": {
          "input": {
            "anyOf": [{ "$ref": "#/components/schemas/FileInfo" }, { "type": "null" }],
            "description": "Original input image"
          },
          "dithered": {
            "anyOf": [{ "$ref": "#/components/schemas/FileInfo" }, { "type": "null" }],
            "description": "Dithered version of the input image"
          },
          "rendered": {
            "anyOf": [{ "$ref": "#/components/schemas/RenderedCategoryDict" }, { "type": "null" }],
            "description": "Rendered images, grouped by line type"
          },
          "schematic": {
            "anyOf": [{ "$ref": "#/components/schemas/FileInfo" }, { "type": "null" }],
            "description": "Generated schematic file"
          },
          "task_zip": {
            "anyOf": [{ "$ref": "#/components/schemas/FileInfo" }, { "type": "null" }],
            "description": "ZIP archive of task files"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "FileListCategories",
        "description": "The categories structure for the FileListResponse."
      },
      "FileListResponse": {
        "properties": {
          "taskId": { "type": "string", "title": "Taskid", "description": "Task identifier" },
          "categories": {
            "$ref": "#/components/schemas/FileListCategories",
            "description": "Files grouped by category"
          }
        },
        "type": "object",
        "required": ["taskId"],
        "title": "FileListResponse",
        "description": "Response model listing available files for a task, grouped by category."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MapInfo": {
        "properties": {
          "id": { "type": "string", "title": "Id", "description": "Map identifier (task ID)" },
          "name": { "type": "string", "title": "Name", "description": "Human-readable map name" },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created",
            "description": "Creation timestamp"
          },
          "thumbnail": {
            "type": "string",
            "title": "Thumbnail",
            "description": "URL to thumbnail image"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "Map description"
          },
          "width": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Width",
            "description": "Map width in blocks"
          },
          "height": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Height",
            "description": "Map height in blocks"
          }
        },
        "type": "object",
        "required": ["id", "name", "created", "thumbnail"],
        "title": "MapInfo",
        "description": "Information about an available map."
      },
      "MapListResponse": {
        "properties": {
          "maps": {
            "items": { "$ref": "#/components/schemas/MapInfo" },
            "type": "array",
            "title": "Maps",
            "description": "Available maps"
          }
        },
        "type": "object",
        "title": "MapListResponse",
        "description": "Response model for the maps list endpoint."
      },
      "RenderedCategoryDict": {
        "properties": {
          "block_lines": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/FileInfo" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Block Lines",
            "description": "Rendered images with block grid lines"
          },
          "chunk_lines": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/FileInfo" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Chunk Lines",
            "description": "Rendered images with chunk border lines"
          },
          "both_lines": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/FileInfo" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Both Lines",
            "description": "Rendered images with both block and chunk lines"
          },
          "no_lines": {
            "anyOf": [
              { "items": { "$ref": "#/components/schemas/FileInfo" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "No Lines",
            "description": "Rendered images without any grid lines"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "RenderedCategoryDict",
        "description": "Dictionary of rendered file subcategories grouped by line type."
      },
      "SelectiveDownloadRequest": {
        "properties": {
          "fileIds": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Fileids",
            "description": "IDs of files to include in download"
          }
        },
        "type": "object",
        "required": ["fileIds"],
        "title": "SelectiveDownloadRequest",
        "description": "Request model for downloading selected files."
      },
      "TaskResponse": {
        "properties": {
          "taskId": {
            "type": "string",
            "title": "Taskid",
            "description": "Unique task identifier"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus",
            "description": "Current task status"
          },
          "progress": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Progress",
            "description": "Progress percentage (0-100)"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Last status update time"
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error",
            "description": "Error message if task failed"
          }
        },
        "type": "object",
        "required": ["taskId", "status"],
        "title": "TaskResponse",
        "description": "Response model for a task status check."
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["queued", "processing", "completed", "failed"],
        "title": "TaskStatus",
        "description": "Possible states of a conversion task."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  }
}
